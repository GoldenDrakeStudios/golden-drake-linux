#!/bin/bash

configure_system() {
  if "${NVIDIA_DRM}"; then
    sed -i \
      '/^MODULES=/ s/.$/ nvidia nvidia_modeset nvidia_uvm nvidia_drm )/;s/" /"/'
    sed -i 's!FILES=""!FILES="/etc/modprobe.d/nvidia.conf"!' \
      /mnt/etc/mkinitcpio.conf
    echo "options nvidia_drm modeset=1" >/mnt/etc/modprobe.d/nvidia.conf
    if (grep <<<"${BASE_PACKAGES}" "nvidia" &>/dev/null); then
      echo "blacklist nouveau" >>/mnt/etc/modprobe.d/nvidia.conf
    fi
    if [ ! -d /mnt/etc/pacman.d/hooks ]; then
      mkdir /mnt/etc/pacman.d/hooks
    fi
    # https://wiki.archlinux.org/index.php/NVIDIA#Pacman_hook
    echo -e "[Trigger]\nOperation=Install\nOperation=Upgrade\nOperation=Remove\
\nType=Package\nTarget=nvidia\nTarget=linux\n\n[Action]\nDescription=Update \
Nvidia module in initcpio\nDepends=mkinitcpio\nWhen=PostTransaction\nNeeds\
Targets\nExec=/bin/sh -c 'while read -r trg; do case \$trg in linux) exit 0; \
esac; done; /usr/bin/mkinitcpio -P'\n" >/mnt/etc/pacman.d/hooks/nvidia.hook
    if ! "${ENCRYPTED}"; then
      arch-chroot /mnt mkinitcpio -p linux |& tee -a "${LOG_FILE}"
    fi
    log "Enabled Nvidia DRM (Direct Rendering Manager)"
  fi

  if "${ENABLE_XFS}"; then
    sed -i '/^MODULES=/ s/.$/ xfs )/;s/" /"/' /mnt/etc/mkinitcpio.conf
    if ! "${ENCRYPTED}"; then
      arch-chroot /mnt mkinitcpio -p linux |& tee -a "${LOG_FILE}"
    fi
    log "Configured system for xfs"
  fi

  if (grep -E <<<"${BOOT}" "nvme.*" &>/dev/null); then
    sed -i '/^MODULES=/ s/.$/ nvme )/;s/" /"/' /mnt/etc/mkinitcpio.conf
    if ! "${ENCRYPTED}"; then
      arch-chroot /mnt mkinitcpio -p linux |& tee -a "${LOG_FILE}"
    fi
    log "Configured system for nvme"
  fi

  if "${ENCRYPTED}" && "${UEFI}"; then
    echo "/dev/${BOOT} ${esp_mnt} vfat rw,relatime,fmask=0022,dmask=0022,\
codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro 0 2" \
      >/mnt/etc/fstab
  elif "${ENCRYPTED}"; then
    echo "/dev/${BOOT} /boot ext4 defaults 0 2" >/mnt/etc/fstab
  fi

  if "${ENCRYPTED}"; then
    echo "/dev/mapper/root / ${FS} defaults 0 1" >>/mnt/etc/fstab
    echo "/dev/mapper/tmp /tmp tmpfs defaults 0 0" >>/mnt/etc/fstab
    echo "tmp /dev/lvm/tmp /dev/urandom tmp,cipher=aes-xts-plain64,size=256" \
      >>/mnt/etc/crypttab
    sed -i 's/^HOOKS=.*/HOOKS="base udev autodetect keyboard keymap consolefont\
modconf block encrypt lvm2 filesystems fsck"/' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -p linux |& tee -a "${LOG_FILE}"
    log "Configured system for encryption"
  else
    sed -i 's/^HOOKS=.*/HOOKS="base udev autodetect keyboard keymap consolefont\
modconf block lvm2 filesystems fsck"/' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -p linux |& tee -a "${LOG_FILE}"
    log "Configured system with default mkinitcpio hooks"
  fi

  sed -i -e "s/#${LOCALE}/${LOCALE}/" /mnt/etc/locale.gen
  echo LANG="${LOCALE}" >/mnt/etc/locale.conf
  arch-chroot /mnt locale-gen
  log "Set system locale: ${LOCALE}"

  if [ "${keyboard}" != "${default}" ]; then
    echo "KEYMAP=${keyboard}" >/mnt/etc/vconsole.conf
    echo -e "Section \"InputClass\"\nIdentifier \"system-keyboard\"\nMatchIs\
Keyboard \"on\"\nOption \"XkbLayout\" \"${keyboard}\"\nEndSection" \
      >/mnt/etc/X11/xorg.conf.d/00-keyboard.conf
    arch-chroot /mnt localectl set-x11-keymap "${keyboard}"
    log "Set system keymap: ${keyboard}"
  fi

  arch-chroot /mnt ln -sf /usr/share/zoneinfo/"${ZONE}" /etc/localtime
  log "Set system time zone: ${ZONE}"

  arch-chroot /mnt ufw enable # firewall
  enable_service ufw.service
  enable_service NetworkManager.service
  if "${BLUETOOTH_AVAILABLE}"; then
    enable_service bluetooth.service
  fi

  if "${VM}"; then
    case "${virt}" in
    vbox)
      enable_service vboxservice.service
      ;;
    vmware)
      cat /mnt/proc/version >/mnt/etc/arch-release
      enable_service vmtoolsd.service
      enable_service vmware-vmblock-fuse.service
      mkdir /mnt/etc/init.d
      for x in {0..6}; do mkdir -p /mnt/etc/init.d/rc"${x}".d; done
      ;;
    esac
  fi

  arch-chroot /mnt fc-cache -f # build font information cache files
  cp "${GDL_DIR}"/extra/gdl.png /mnt/usr/share/pixmaps
  cp "${GDL_DIR}"/extra/gdl.png /mnt/usr/share/icons
  cp -r "${GDL_DIR}"/extra/Breeze_Amber /mnt/usr/share/icons
  cp -rT "${GDL_DIR}"/extra/wallpapers /mnt/usr/share/backgrounds/xfce
  cp -rT "${GDL_DIR}"/extra/skel /mnt/etc/skel
  cp -rT "${GDL_DIR}"/extra/root /mnt/root
  cp /mnt/etc/skel/.bash_profile /mnt/root/
  cp /mnt/etc/skel/.vimrc /mnt/root/
  cp "${GDL_DIR}"/extra/gdl.png /mnt/root/.face
  log "Configured desktop environment"

  cp -rT "${GDL_DIR}"/extra/lightdm /mnt/etc/lightdm
  enable_service lightdm.service
  enable_service dhcpcd.service
  enable_service cpupower.service
  enable_service fstrim.timer # periodic (weekly) TRIM for all supported drives

  if [ -f /mnt/var/lib/pacman/db.lck ]; then
    rm /mnt/var/lib/pacman/db.lck &>/dev/null
  fi

  # Ensure proper MIDI support for certain GStreamer-based media players
  mkdir -p /mnt/usr/share/sounds/sf2
  arch-chroot /mnt sh -c "ln -s /usr/share/soundfonts/FluidR3_GM.sf2 \
    /usr/share/sounds/sf2/"

  sed -i 's/^#Color$/Color/' /mnt/etc/pacman.conf
  sed -i 's/^#CheckSpace$/CheckSpace/' /mnt/etc/pacman.conf
  sed -i 's/^#VerbosePkgLists$/VerbosePkgLists/' /mnt/etc/pacman.conf
  sed -i '/^VerbosePkgLists$/ a ILoveCandy' /mnt/etc/pacman.conf
  sed -i '/\[multilib]$/ {
    N
    /Include/s/#//g}' /mnt/etc/pacman.conf
  log "Customized pacman.conf"

  echo "${NEW_HOSTNAME}" >/mnt/etc/hostname
  log "Hostname set: ${NEW_HOSTNAME}"
  local pw
  pw="$(echo "${NEW_PW}" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 -iter \
    1000 -pass pass:"${ssl_key}")"
  printf "%s\n%s" "${pw}" "${pw}" | arch-chroot /mnt passwd root
  unset pw
  log "Password set for user: root"
}
