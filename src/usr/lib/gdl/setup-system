#!/usr/bin/env bash

configure_system() {
  op_title="${config_op_msg}"

  if [ "${bootloader}" == "syslinux" ] || [ "${bootloader}" == "systemd-boot" ] && "${UEFI}"; then
    if [ "${esp_mnt}" != "/boot" ]; then
      (
        mkdir "${ARCH}"/etc/pacman.d/hooks
        if [ "${kernel}" == "linux" ]; then
          echo -e "${linux_hook}\nExec = /usr/bin/cp /boot/{vmlinuz-linux,initramfs-linux.img,initramfs-linux-fallback.img} ${esp_mnt}" >"${ARCH}"/etc/pacman.d/hooks/linux-esp.hook
          cp "${ARCH}"/boot/{vmlinuz-linux,initramfs-linux.img,initramfs-linux-fallback.img} "${ARCH}${esp_mnt}"
        elif [ "${kernel}" == "linux-lts" ]; then
          echo -e "${lts_hook}\nExec = /usr/bin/cp /boot/{vmlinuz-linux-lts,initramfs-linux-lts.img,initramfs-linux-lts-fallback.img} ${esp_mnt}" >"${ARCH}"/etc/pacman.d/hooks/linux-esp.hook
          cp "${ARCH}"/boot/{vmlinuz-linux-lts,initramfs-linux-lts.img,initramfs-linux-lts-fallback.img} "${ARCH}${esp_mnt}"
        elif [ "${kernel}" == "linux-hardened" ]; then
          echo -e "${hardened_hook}\nExec = /usr/bin/cp /boot/{vmlinuz-linux-hardened,initramfs-linux-hardened.img,initramfs-linux-hardened-fallback.img} ${esp_mnt}" >"${ARCH}"/etc/pacman.d/hooks/linux-esp.hook
          cp "${ARCH}"/boot/{vmlinuz-linux-hardened,initramfs-linux-hardened.img,initramfs-linux-hardened-fallback.img} "${ARCH}${esp_mnt}"
        elif [ "${kernel}" == "linux-zen" ]; then
          echo -e "${zen_hook}\nExec = /usr/bin/cp /boot/{vmlinuz-linux-zen,initramfs-linux-zen.img,initramfs-linux-zen-fallback.img} ${esp_mnt}" >"${ARCH}"/etc/pacman.d/hooks/linux-esp.hook
          cp "${ARCH}"/boot/{vmlinuz-linux-zen,initramfs-linux-zen.img,initramfs-linux-zen-fallback.img} "${ARCH}${esp_mnt}"
        fi
      ) &
      pid=$! pri=0.1 msg="${wait_load}\n\n \Z1> \Z3cp ${ARCH}/boot/ ${ARCH}${esp_mnt}\Zn" load
    fi
  fi

  if "${drm}"; then
    sed -i '/^MODULES=/ s/.$/ nvidia nvidia_modeset nvidia_uvm nvidia_drm )/;s/" /"/'
    sed -i 's!FILES=""!FILES="/etc/modprobe.d/nvidia.conf"!' "${ARCH}"/etc/mkinitcpio.conf
    echo "options nvidia_drm modeset=1" >"${ARCH}"/etc/modprobe.d/nvidia.conf

    if (grep <<<"${GPU}" "nvidia" &>/dev/null); then
      echo "blacklist nouveau" >>"${ARCH}"/etc/modprobe.d/nvidia.conf
    fi

    if [ ! -d "${ARCH}"/etc/pacman.d/hooks ]; then
      mkdir "${ARCH}"/etc/pacman.d/hooks
    fi

    echo -e "${nvidia_hook}\nExec=/usr/bin/mkinitcpio -p ${kernel}" >"${ARCH}"/etc/pacman.d/hooks/nvidia.hook

    if ! "${crypted}" && ! "${enable_f2fs}"; then
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}" &>/dev/null &
      pid=$! pri=1 msg="\n${kernel_config_load}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    fi

    log "Enable nvidia drm"
  fi

  if "${enable_f2fs}"; then
    sed -i '/^MODULES=/ s/.$/ f2fs crc32 libcrc32c crc32c_generic crc32c-intel crc32-pclmul )/;s/" /"/' "${ARCH}"/etc/mkinitcpio.conf
    if ! "${crypted}"; then
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}" &>/dev/null &
      pid=$! pri=1 msg="\n${f2fs_config_load}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    fi
    log "Configure system for f2fs"
  fi

  if "${enable_xfs}"; then
    sed -i '/^MODULES=/ s/.$/ xfs )/;s/" /"/' "${ARCH}"/etc/mkinitcpio.conf
    if ! "${crypted}"; then
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}" &>/dev/null &
      pid=$! pri=1 msg="\n${xfs_config_load}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    fi
    log "Configure system for xfs"
  fi

  if (egrep <<<"${BOOT}" "nvme.*" &>/dev/null); then
    sed -i '/^MODULES=/ s/.$/ nvme )/;s/" /"/' "${ARCH}"/etc/mkinitcpio.conf
    if ! "${crypted}"; then
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}" &>/dev/null &
      pid=$! pri=1 msg="\n${kernel_config_load}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    fi
    log "Configure system for nvme"
  fi

  if "${crypted}" && "${UEFI}"; then
    echo "/dev/${BOOT}              ${esp_mnt}        vfat         rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro        0       2" >"${ARCH}"/etc/fstab
  elif "${crypted}"; then
    echo "/dev/${BOOT}              /boot           ext4        defaults        0       2" >"${ARCH}"/etc/fstab
  fi

  if "${crypted}"; then
    (
      echo "/dev/mapper/root        /               ${FS}         defaults        0       1" >>"${ARCH}"/etc/fstab
      echo "/dev/mapper/tmp         /tmp            tmpfs        defaults        0       0" >>"${ARCH}"/etc/fstab
      echo "tmp	       /dev/lvm/tmp	       /dev/urandom	tmp,cipher=aes-xts-plain64,size=256" >>"${ARCH}"/etc/crypttab
      if "${SWAP}"; then
        echo "/dev/mapper/swap     none            swap          sw                    0       0" >>"${ARCH}"/etc/fstab
        echo "swap	/dev/lvm/swap	/dev/urandom	swap,cipher=aes-xts-plain64,size=256" >>"${ARCH}"/etc/crypttab
      fi
      sed -i 's/HOOKS=.*/HOOKS="base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck"/' "${ARCH}"/etc/mkinitcpio.conf
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}"
    ) &>/dev/null &
    pid=$! pri=1 msg="\n${encrypt_load1}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    log "Configure system for encryption"
  else
    (
      sed -i 's/HOOKS=.*/HOOKS="base udev autodetect keyboard keymap consolefont modconf block lvm2 filesystems fsck"/' "${ARCH}"/etc/mkinitcpio.conf
      arch-chroot "${ARCH}" mkinitcpio -p "${kernel}"
    ) &>/dev/null &
    pid=$! pri=1 msg="\n${kernel_config_load}\n\n \Z1> \Z3mkinitcpio -p ${kernel}\Zn" load
    log "Configure system with the default mkinitcpio hooks"
  fi

  (
    sed -i -e "s/#${LOCALE}/${LOCALE}/" "${ARCH}"/etc/locale.gen
    echo LANG="${LOCALE}" >"${ARCH}"/etc/locale.conf
    arch-chroot "${ARCH}" locale-gen
  ) &>/dev/null &
  pid=$! pri=0.1 msg="\n${locale_load_var}\n\n \Z1> \Z3LANG=${LOCALE} ; locale-gen\Zn" load
  log "Set system locale: ${LOCALE}"

  if [ "${keyboard}" != "${default}" ]; then
    echo "KEYMAP=${keyboard}" >"${ARCH}"/etc/vconsole.conf
    if "${desktop}"; then
      echo -e "Section \"InputClass\"\nIdentifier \"system-keyboard\"\nMatchIsKeyboard \"on\"\nOption \"XkbLayout\" \"${keyboard}\"\nEndSection" >"${ARCH}"/etc/X11/xorg.conf.d/00-keyboard.conf
      arch-chroot "${ARCH}" localectl set-x11-keymap "${keyboard}" &>/dev/null
    fi
    log "Set system keymap: ${keyboard}"
  fi

  (
    arch-chroot "${ARCH}" ln -sf /usr/share/zoneinfo/"${ZONE}" /etc/localtime
    sleep 0.5
  ) &
  pid=$! pri=0.1 msg="\n${zone_load_var}\n\n \Z1> \Z3ln -sf ${ZONE} /etc/localtime\Zn" load
  log "Set system time zone: ${ZONE}"

  case "${net_util}" in
  networkmanager)
    enable_service NetworkManager.service
    pid=$! pri=0.1 msg="\n${nwmanager_msg0}\n\n \Z1> \Z3systemctl enable NetworkManager.service\Zn" load
    ;;
  netctl)
    enable_service netctl.service
    pid=$! pri=0.1 msg="\n${nwmanager_msg1}\n\n \Z1> \Z3systemctl enable netctl.service\Zn" load
    ;;
  esac

  if "${enable_bt}"; then
    enable_service bluetooth.service
    pid=$! pri=0.1 msg="\n${btenable_msg}\n\n \Z1> \Z3systemctl enable bluetooth.service\Zn" load
  fi

  if "${desktop}"; then
    echo "${start_term}" >"${ARCH}"/etc/skel/.xinitrc
    echo "${start_term}" >"${ARCH}"/root/.xinitrc
    log "Create xinitrc: ${start_term}"
  fi

  if "${enable_dm}"; then
    enable_service "${DM}".service
    pid=$! pri="0.1" msg="${wait_load}\n\n \Z1> \Z3systemctl enable ${DM}\Zn" load
  fi

  if "${VM}"; then
    case "${virt}" in
    vbox)
      enable_service vboxservice.service
      pid=$! pri=0.1 msg="\n${vbox_enable_msg}\n\n \Z1> \Z3systemctl enable vboxservice\Zn" load
      ;;
    vmware)
      (
        cat "${ARCH}"/proc/version >"${ARCH}"/etc/arch-release
        enable_service vmtoolsd.service
        enable_service vmware-vmblock-fuse.service
        mkdir "${ARCH}"/etc/init.d
        for x in {0..6}; do mkdir -p "${ARCH}"/etc/init.d/rc${x}.d; done
      ) &>/dev/null &
      pid=$! pri=0.1 msg="\n${vbox_enable_msg}\n\n \Z1> \Z3systemctl enable vmtoolsd\Zn" load
      ;;
    esac
  fi

  if "${desktop}"; then
    config_env &
    pid=$! pri="0.1" msg="${wait_load}\n\n \Z1> \Z3gdl configure desktop\Zn" load

    if [ "${DM}" == "lightdm" ]; then
      cp -r "${gdl_directory}"/extra/desktop/lightdm/lightdm-gtk-greeter.conf "${ARCH}"/etc/lightdm/
    fi
  fi

  if "${multilib}"; then
    sed -i '/\[multilib]$/ {
        N
        /Include/s/#//g}' "${ARCH}"/etc/pacman.conf
    log "Include multilib"
  fi

  if "${dhcp}"; then
    enable_service dhcpcd.service
    pid=$! pri=0.1 msg="\n${dhcp_load}\n\n \Z1> \Z3systemctl enable dhcpcd\Zn" load
  fi

  if "${enable_ssh}"; then
    enable_service sshd.service
    pid=$! pri=0.1 msg="\n${ssh_load}\n\n \Z1> \Z3systemctl enable sshd\Zn" load
  fi

  if "${enable_ftp}"; then
    enable_service "${ftp}".service
    pid=$! pri=0.1 msg="\n${ftp_load}\n\n \Z1> \Z3systemctl enable ${ftp}\Zn" load
  fi

  if "${enable_cups}"; then
    enable_service cups.service
    pid=$! pri=0.1 msg="\n${cups_load}\n\n \Z1> \Z3systemctl enable cups\Zn" load
  fi

  enable_service cpupower.service
  pid=$! pri=0.1 msg="\n${cups_load}\n\n \Z1> \Z3systemctl enable cpupower\Zn" load

  if "${enable_http}"; then
    case "${config_http}" in
    "LAMP")
      (
        enable_service httpd.service
        sed -i 's!LoadModule mpm_event_module modules/mod_mpm_event.so!LoadModule mpm_prefork_module modules/mod_mpm_prefork.so!' "${ARCH}"/etc/httpd/conf/httpd.conf
        tac "${ARCH}"/etc/httpd/conf/httpd.conf | awk '!p && /LoadModule/{print "AddHandler php7-script php\nLoadModule php7_module modules/libphp7.so\n# PHP Modules\n"; p=1} 1' | tac >"${ARCH}"/etc/httpd/conf/httpd.conf.bak
        tac "${ARCH}"/etc/httpd/conf/httpd.conf | awk '!p && /Include/{print "\nInclude conf/extra/php7_module.conf\n# PHP Modules\n"; p=1} 1' | tac >"${ARCH}"/etc/httpd/conf/httpd.conf.bak
        cp "${ARCH}"/etc/httpd/conf/httpd.conf.bak "${ARCH}"/etc/httpd/conf/httpd.conf
        sed -i 's/;extension=pdo_mysql.so/extension=pdo_mysql.so/' "${ARCH}"/etc/php/php.ini
      ) &>/dev/null &
      pid=$! pri=0.1 msg="\n${http_load}\n\n \Z1> \Z3configure LAMP stack\Zn" load
      ;;
    "LEMP")
      (
        enable_service nginx.service
        enable_service php-fpm.service
      ) &>/dev/null &
      pid=$! pri=0.1 msg="\n${http_load}\n\n \Z1> \Z3configure LEMP stack\Zn" load
      ;;
    "apache")
      enable_service httpd.service
      pid=$! pri=0.1 msg="\n${http_load}\n\n \Z1> \Z3systemctl enable httpd\Zn" load
      ;;
    "nginx")
      enable_service nginx.service
      pid=$! pri=0.1 msg="\n${http_load}\n\n \Z1> \Z3systemctl enable nginx\Zn" load
      ;;
    esac
  fi

  if [ -f "${ARCH}"/var/lib/pacman/db.lck ]; then
    rm "${ARCH}"/var/lib/pacman/db.lck &>/dev/null
  fi

  arch-chroot "${ARCH}" pacman -Syq &>/dev/null &
  pid=$! pri=0.8 msg="\n${pacman_load}\n\n \Z1> \Z3pacman -Syq\Zn" load
  log "Updated pacman databases"

  if [ "${sh}" == "/bin/bash" ]; then
    cp "${ARCH}"/etc/skel/.bash_profile "${ARCH}"/root/
  elif [ "${sh}" == "/usr/bin/zsh" ]; then
    if [ "${shrc}" == "${default}" ]; then
      cp "${gdl_directory}"/extra/.zshrc "${ARCH}"/root/.zshrc
      cp "${gdl_directory}"/extra/.zshrc "${ARCH}"/etc/skel/.zshrc
    elif [ "${shrc}" == "grml-zsh-config" ]; then
      cp "${gdl_directory}"/extra/.zshrc-grml "${ARCH}"/root/.zshrc
      cp "${gdl_directory}"/extra/.zshrc-grml "${ARCH}"/etc/skel/.zshrc
    else
      touch "${ARCH}"/root/.zshrc
      touch "${ARCH}"/etc/skel/.zshrc
    fi
  elif [ "${shell}" == "fish" ]; then
    echo "exec fish" >>"${gdl_directory}"/extra/.bashrc-root
    echo "exec fish" >>"${gdl_directory}"/extra/.bashrc
  elif [ "${shell}" == "tcsh" ]; then
    cp "${gdl_directory}"/extra/{.tcshrc,.tcshrc.conf} "${ARCH}"/root/
    cp "${gdl_directory}"/extra/{.tcshrc,.tcshrc.conf} "${ARCH}"/etc/skel/
  elif [ "${shell}" == "mksh" ]; then
    cp "${gdl_directory}"/extra/.mkshrc "${ARCH}"/root/
    cp "${gdl_directory}"/extra/.mkshrc "${ARCH}"/etc/skel/
  fi

  cp "${gdl_directory}"/extra/.bashrc-root "${ARCH}"/root/.bashrc
  cp "${gdl_directory}"/extra/.bashrc "${ARCH}"/etc/skel/

  sed -i 's/^#Color$/Color/' "${ARCH}"/etc/pacman.conf
  sed -i 's/^#TotalDownload$/TotalDownload/' "${ARCH}"/etc/pacman.conf
  sed -i 's/^#CheckSpace$/CheckSpace/' "${ARCH}"/etc/pacman.conf
  sed -i 's/^#VerbosePkgLists$/VerbosePkgLists/' "${ARCH}"/etc/pacman.conf
  sed -i '/^VerbosePkgLists$/ a ILoveCandy' "${ARCH}"/etc/pacman.conf

  echo "${hostname}" >"${ARCH}"/etc/hostname
  log "Set hostname: ${hostname}"
  arch-chroot "${ARCH}" chsh -s "${sh}" &>/dev/null
  input="$(echo "${root_crypt}" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 -iter 1000 -pass pass:"${ssl_key}")"
  (
    sleep 1
    printf "%s\n%s" "${input}" "${input}" | arch-chroot "${ARCH}" passwd root
  ) &>/dev/null &
  pid=$! pri=0.1 msg="${wait_load}\n\n \Z1> \Z3passwd root\Zn" load
  unset input
  log "Set password for root"
}
