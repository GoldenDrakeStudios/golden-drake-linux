#!/usr/bin/env bash

install_base() {
  op_title="${install_op_msg}"
  base_install=$(tr <<<"${base_install}" " " "\n" | sort | uniq | tr "\n" " ")
  pacman -Sy --print-format='%s' $(echo "${base_install}") | awk '{s+=$1} END {print s/1024/1024}' >/tmp/size &
  pid=$! pri=0.6 msg="\n${pacman_load}\n\n \Z1> \Z3pacman -Sy\Zn" load
  download_size="$(</tmp/size)"
  rm /tmp/size
  export software_size
  software_size=$(sed <<<"${download_size}" 's/\(\..\)\(.*\)/\1 MiB/')
  cal_rate

  if [ "$(wc -w <<<"${base_install}")" -gt "30" ]; then
    height="24"
  elif [ "$(wc -w <<<"${base_install}")" -gt "25" ]; then
    height="20"
  elif [ "$(wc -w <<<"${base_install}")" -gt "20" ]; then
    height="18"
  else
    height="16"
  fi

  until "${INSTALLED}"; do
    if (yesno "\n${install_var}" "${install}" "${cancel}"); then
      log "Begin base install"
      base_install="$(pacman -Sqg base linux) ${base_install}"
      (
        pacstrap "${ARCH}" --overwrite $(echo "${base_install}")
        echo "$?" >/tmp/ex_status
      ) | log &
      pid=$! pri=$(echo "${down}" | sed 's/\..*$//') msg="\n${install_load_var}" load_log
      genfstab -U -p "${ARCH}" >>"${ARCH}"/etc/fstab
      if [ "$(</tmp/ex_status)" -eq "0" ]; then
        INSTALLED=true
        log "Installed packages to system"
      else
        report_error
        exit 1
      fi
      grub_config
      log "Configured bootloader"
    else
      if (yesno "\n${exit_msg}" "${yes}" "${no}"); then
        unset base_install DE
        main_menu
      fi
    fi
  done
}

prepare_base() {
  op_title="${install_op_msg}"
  base_install="base-devel linux linux-headers ${default_packages} ${UCODE} "

  while (true); do
    shell=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${shell_msg}" 16 64 6 \
      "bash" "${shell5}" \
      "dash" "${shell0}" \
      "fish" "${shell1}" \
      "mksh" "${shell2}" \
      "tcsh" "${shell3}" \
      "zsh" "${shell4}" 3>&1 1>&2 2>&3)
    if [ "$?" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    else
      case "${shell}" in
      bash)
        sh="/bin/bash" shell="bash-completion"
        ;;
      fish)
        sh="/usr/bin/fish"
        ;;
      zsh)
        shrc=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "\n${shrc_msg}" 13 65 4 \
          "${default}" "${shrc_msg1}" \
          "grml-zsh-config" "${shrc_msg4}" \
          "${none}" "${shrc_msg3}" 3>&1 1>&2 2>&3)
        if [ "$?" -gt "0" ]; then
          shrc="${default}"
        fi
        sh="/usr/bin/${shell}" shell="zsh zsh-syntax-highlighting"
        if [ "${shrc}" = "grml-zsh-config" ]; then
          shell+=" grml-zsh-config zsh-completions"
        fi
        ;;
      *)
        sh="/bin/${shell}"
        ;;
      esac
      base_install+="${shell} "
      break
    fi
  done
  if "${wifi}" || (yesno "\n${wifi_option_msg}" "${yes}" "${no}" 1); then
    base_install+="wireless_tools wpa_supplicant "
    log "Added wireless utilities"
  fi
  if "${bluetooth}" && (yesno "\n${bluetooth_msg}" "${yes}" "${no}" 1); then
    base_install+="bluez bluez-utils pulseaudio-bluetooth "
    enable_bt=true
    log "Added bluetooth support"
  fi
  if (yesno "\n${os_prober_msg}" "${yes}" "${no}" 1); then
    base_install+="os-prober "
    log "Added os-prober"
  fi
  if "${enable_f2fs}"; then
    base_install+="f2fs-tools "
    log "Added f2fs-tools"
  fi
  if "${UEFI}"; then
    base_install+="efibootmgr "
    log "Added efibootmgr"
  fi
}
