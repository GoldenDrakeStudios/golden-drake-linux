#!/bin/bash

prepare_drives() {
  op_title="${part_op_msg}"
  if (df | grep /mnt &>/dev/null); then
    umount -R /mnt &>/dev/null &
    pid=$! pri=0.1 msg="\n${wait_load}\n\n \Z1> \Z3umount -R /mnt\Zn" load
  fi
  until "${MOUNTED}"; do
    PART=$(dialog --stdout --ok-button "${ok}" --cancel-button "${cancel}" \
      --menu "\n${part_msg}" 16 64 4 \
      "${method_auto}" "-" \
      "${method_auto_encrypt}" "-" \
      "${method_manual}" "-" \
      "${return_to_menu_msg}" "-")
    if [ "$?" -gt "0" ] || [ "${PART}" = "${return_to_menu_msg}" ]; then
      main_menu
    elif [ "${PART}" != "${method_manual}" ]; then
      dev_menu="             Device  | Size  | Type"
      if "${SCREEN_HEIGHT_SUFFICIENT}"; then
        echo "dialog --colors --backtitle \"${backtitle}\" --title \" ${title} \
\" --ok-button \"${ok}\" --cancel-button \"${cancel}\" --stdout --menu \
\"\n${drive_msg}\n\n ${dev_menu}\" 16 60 5 \\" >"${tmp_menu}"
      else
        echo "dialog --stdout --colors --title \" ${title} \" --ok-button \
\"${ok}\" --cancel-button \"${cancel}\" --menu \"\n${drive_msg}\n\n \
${dev_menu}\" 16 60 5 \\" >"${tmp_menu}"
      fi
      echo $(lsblk -nio NAME,SIZE,TYPE | grep -E "disk|raid[0-9]+$" |
sed 's/[^[:alnum:]_., ]//g' | column -t | sort -k 1,1 | uniq |
awk '{print "\""$1"\"""  ""\"| "$2" | "$3"     \""" \\"}' |
column -t) >>"${tmp_menu}"
      DRIVE=$(bash "${tmp_menu}")
      rm "${tmp_menu}"
      if [ -n "${DRIVE}" ]; then
        if (grep <<<"${DRIVE}" -E "nvme.*|mmc.*|md.*" &>/dev/null); then
          PART_PREFIX="p"
        fi
        drive_byte=$(lsblk -nibo NAME,SIZE | grep -w "${DRIVE}" |
          awk '{print $2}')
        drive_mib=$((drive_byte / 1024 / 1024))
        drive_gigs=$((drive_mib / 1024))
        log "Drive size in MiB: ${drive_mib}"
        fs_select
        if (efivar -l &>/dev/null); then
          if (yesno "\n${efi_msg0}" "${yes}" "${no}"); then
            GPT=true
            UEFI=true
            log "UEFI boot activated"
          fi
        fi
        if ! "${UEFI}"; then
          if (yesno "\n${gpt_msg}" "${yes}" "${no}" 1); then
            GPT=true
            log "GPT partition scheme activated"
          fi
        fi
        source "${LANG_FILE}"
        if "${UEFI}"; then
          drive_var="${drive_var3}"
        fi
        if (yesno "\n${drive_var}" "${write}" "${cancel}" 1); then
          (
            sgdisk --zap-all /dev/"${DRIVE}"
            wipefs -a /dev/"${DRIVE}"
          ) &>/dev/null &
          pid=$! pri=0.1 \
            msg="\n${frmt_load}\n\n \Z1> \Z3sgdisk --zap-all /dev/${DRIVE}\Zn" \
            load
          log "Device formatted: /dev/${DRIVE}"
        else
          unset PART
        fi
      else
        continue
      fi
    fi
    case "${PART}" in
    "${method_auto}")
      auto_part
      if ! "${MOUNTED}"; then
        msg "\n${part_err_msg}"
      fi
      ;;
    "${method_auto_encrypt}")
      auto_encrypt
      if ! "${MOUNTED}"; then
        msg "\n${part_err_msg}"
      fi
      ;;
    "${method_manual}")
      points=$(echo -e "${points_orig}\n${custom} ${custom}-mountpoint")
      part_menu
      ;;
    esac
  done
}

auto_part() {
  op_title="${partload_op_msg}"
  if "${GPT}"; then
    if "${UEFI}"; then
      echo -e "n\n\n\n512M\nef00\nn\n\n\n\n\nw\ny" |
        gdisk /dev/"${DRIVE}" &>/dev/null &
      pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3gdisk /dev/${DRIVE}\Zn" \
        load
      BOOT="${DRIVE}${PART_PREFIX}1"
      ROOT="${DRIVE}${PART_PREFIX}2"
    else
      echo -e "o\ny\nn\n1\n\n+212M\n\nn\n2\n\n+1M\nEF02\nn\n3\n\n\n\nw\ny" |
        gdisk /dev/"${DRIVE}" &>/dev/null &
      pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3gdisk /dev/${DRIVE}\Zn" \
        load
      BOOT="${DRIVE}${PART_PREFIX}1"
      ROOT="${DRIVE}${PART_PREFIX}3"
    fi
  else
    echo -e "o\nn\np\n1\n\n+212M\nn\np\n2\n\n\nw" |
      fdisk /dev/"${DRIVE}" &>/dev/null &
    pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3fdisk /dev/${DRIVE}\Zn" \
      load
    BOOT="${DRIVE}${PART_PREFIX}1"
    ROOT="${DRIVE}${PART_PREFIX}2"
  fi
  log "Created boot partition: ${BOOT}"
  log "Created root partition: ${ROOT}"
  if "${UEFI}"; then
    (
      sgdisk --zap-all /dev/"${BOOT}"
      wipefs -a /dev/"${BOOT}"
      mkfs.vfat -F32 /dev/"${BOOT}"
    ) &>/dev/null &
    pid=$! pri=0.1 \
      msg="\n${efi_load}\n\n \Z1> \Z3mkfs.vfat -F32 /dev/${BOOT}\Zn" load
    esp_part="${BOOT}"
    esp_mnt=/boot
    log "ESP partition set to: ${esp_part}"
    log "ESP mount point set to: ${esp_mnt}"
    log "Created boot filesystem: vfat"
  else
    (
      sgdisk --zap-all /dev/"${BOOT}"
      wipefs -a /dev/"${BOOT}"
      mkfs.ext4 -O \^64bit /dev/"${BOOT}"
    ) &>/dev/null &
    pid=$! pri=0.1 msg="\n${boot_load}\n\n \Z1> \Z3mkfs.ext4 /dev/${BOOT}\Zn" \
      load
    log "Boot mount point set to: /boot"
    log "Created boot filesystem: ext4"
  fi
  (
    sgdisk --zap-all /dev/"${ROOT}"
    wipefs -a /dev/"${ROOT}"
    mkfs."${FS}" /dev/"${ROOT}"
  ) &>/dev/null &
  pid=$! pri=0.6 msg="\n${load_var1}\n\n \Z1> \Z3mkfs.${FS} /dev/${ROOT}\Zn" \
    load
  log "Created root filesystem: ${FS}"
  (
    mount /dev/"${ROOT}" /mnt
    echo "$?" >/tmp/ex_status.var
    mkdir /mnt/boot
    mount /dev/"${BOOT}" /mnt/boot
  ) &>/dev/null &
  pid=$! pri=0.1 msg="\n${mnt_load}\n\n \Z1> \Z3mount /dev/${ROOT} /mnt\Zn" load
  log "Root filesystem mounted: /mnt"
  log "Boot filesystem mounted: /mnt/boot"
  if [ "$(</tmp/ex_status.var)" -eq "0" ]; then
    MOUNTED=true
  fi
  rm /tmp/ex_status.var
}

auto_encrypt() {
  op_title="${partload_op_msg}"
  local input=""
  local input_check="check"
  if (yesno "\n${encrypt_var0}" "${yes}" "${no}" 1); then
    while [ "${input}" != "${input_check}" ]; do
      input=$(dialog --stdout --no-cancel --clear --insecure --passwordbox \
        "${encrypt_var1}" 12 55)
      input_check=$(dialog --stdout --no-cancel --clear --insecure \
        --passwordbox "${encrypt_var2}" 12 55)
      if [ -z "${input}" ]; then
        msg "\n${passwd_msg0}"
        input_check="check"
      elif [ "${input}" != "${input_check}" ]; then
        msg "\n${passwd_msg1}"
      fi
    done
  else
    return
  fi
  if "${GPT}"; then
    if "${UEFI}"; then
      echo -e "n\n\n\n512M\nef00\nn\n\n\n\n\nw\ny" |
        gdisk /dev/"${DRIVE}" &>/dev/null &
      pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3gdisk /dev/${DRIVE}\Zn" \
        load
      BOOT="${DRIVE}${PART_PREFIX}1"
      ROOT="${DRIVE}${PART_PREFIX}2"
    else
      echo -e "o\ny\nn\n1\n\n+512M\n\nn\n2\n\n+1M\nEF02\nn\n3\n\n\n\nw\ny" |
        gdisk /dev/"${DRIVE}" &>/dev/null &
      pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3gdisk /dev/${DRIVE}\Zn" \
        load
      BOOT="${DRIVE}${PART_PREFIX}1"
      ROOT="${DRIVE}${PART_PREFIX}3"
    fi
  else
    echo -e "o\nn\np\n1\n\n+512M\nn\np\n2\n\n\nw" |
      fdisk /dev/"${DRIVE}" &>/dev/null &
    pid=$! pri=0.1 msg="\n${load_var0}\n\n \Z1> \Z3fdisk /dev/${DRIVE}\Zn" load
    BOOT="${DRIVE}${PART_PREFIX}1"
    ROOT="${DRIVE}${PART_PREFIX}2"
  fi
  log "Created boot partition: ${BOOT}"
  log "Created root partition: ${ROOT}"
  (
    sgdisk --zap-all /dev/"${ROOT}"
    sgdisk --zap-all /dev/"${BOOT}"
    wipefs -a /dev/"${ROOT}"
    wipefs -a /dev/"${BOOT}"
  ) &>/dev/null &
  pid=$! pri=0.1 msg="\n${frmt_load}\n\n \Z1> \Z3wipefs -a /dev/${ROOT}\Zn" load
  log "Wiped boot partition"
  log "Wiped root partition"
  (
    lvm pvcreate /dev/"${ROOT}"
    lvm vgcreate lvm /dev/"${ROOT}"
  ) &>/dev/null &
  pid=$! pri=0.1 msg="\n${pv_load}\n\n \Z1> \Z3lvm pvcreate /dev/${ROOT}\Zn" \
    load
  log "Created physical root volume: /dev/${ROOT}"
  (
    lvm lvcreate -L 500M -n tmp lvm
    lvm lvcreate -l 100%FREE -n lvroot lvm
  ) &>/dev/null &
  pid=$! pri=0.1 \
    msg="\n${lv_load}\n\n \Z1> \Z3lvm lvcreate -l 100%FREE -n lvroot lvm\Zn" \
    load
  log "Created logical root volume: lvroot"
  log "Created logical tmp filesystem: tmp"
  (
    printf "%s" "${input}" |
      cryptsetup luksFormat -c aes-xts-plain64 -s 512 /dev/lvm/lvroot -
    printf "%s" "${input}" |
      cryptsetup open --type luks /dev/lvm/lvroot root -
  ) &>/dev/null &
  pid=$! pri=0.2 msg="\n${encrypt_load}\n\n \Z1> \Z3cryptsetup luksFormat -c \
aes-xts-plain64 -s 512 /dev/lvm/lvroot\Zn" load
  log "Encrypted logical volume: lvroot"
  unset input input_check
  wipefs -a /dev/mapper/root &>/dev/null
  mkfs."${FS}" /dev/mapper/root &>/dev/null &
  pid=$! pri=1 msg="\n${load_var1}\n\n \Z1> \Z3mkfs.${FS} /dev/mapper/root\Zn" \
    load
  log "Created root filesystem: ${FS}"
  if "${UEFI}"; then
    mkfs.vfat -F32 /dev/"${BOOT}" &>/dev/null &
    pid=$! pri=0.2 \
      msg="\n${efi_load}\n\n \Z1> \Z3mkfs.vfat -F32 /dev/${BOOT}\Zn" load
    esp_part="/dev/${BOOT}"
    esp_mnt=/boot
    log "Created boot filesystem: vfat"
  else
    mkfs.ext4 -O \^64bit /dev/"${BOOT}" &>/dev/null &
    pid=$! pri=0.2 msg="\n${boot_load}\n\n \Z1> \Z3mkfs.ext4 /dev/${BOOT}\Zn" \
      load
    log "Created boot filesystem: ext4"
  fi
  (
    mount /dev/mapper/root /mnt
    echo "$?" >/tmp/ex_status.var
    mkdir /mnt/boot
    mount /dev/"${BOOT}" /mnt/boot
  ) &>/dev/null &
  pid=$! pri=0.1 msg="\n${mnt_load}\n\n \Z1> \Z3mount /dev/mapper/root /mnt\Zn"\
    load
  log "Mounted root filesystem: /mnt"
  log "Mounted boot filesystem: /mnt/boot"
  if [ "$(</tmp/ex_status.var)" -eq "0" ]; then
    MOUNTED=true
    ENCRYPTED=true
  fi
  rm /tmp/ex_status.var
}

part_menu() {
  op_title="${manual_op_msg}"
  unset part
  dev_menu="   | Device | Size | Used | FS | Mount | Type |"
  device_list=$(lsblk -no NAME,SIZE,TYPE,FSTYPE |
    grep -Ev "${USB}|loop[0-9]+|sr[0-9]+|fd[0-9]+" |
    sed 's/[^[:alnum:]_., -]//g' | column -t | sort -k 1,1 | uniq)
  device_count=$(wc <<<"${device_list}" -l)
  if "${SCREEN_HEIGHT_SUFFICIENT}"; then
    echo "dialog --stdout --extra-button --extra-label \"${write}\" --colors \
--backtitle \"${backtitle}\" --title \" ${op_title} \" --ok-button \"${edit}\" \
--cancel-button \"${cancel}\" --menu \"\n${manual_part_msg}\n\n ${dev_menu}\" \
21 68 9 \\" >"${tmp_menu}"
  else
    echo "dialog --stdout --extra-button --extra-label \"${write}\" --colors \
--title \" ${title} \" --ok-button \"${edit}\" --cancel-button \"${cancel}\" \
--menu \"\n${manual_part_msg}\n\n ${dev_menu}\" 20 68 8 \\" >"${tmp_menu}"
  fi
  int=1
  empty_value="----"
  until [ "${int}" -gt "${device_count}" ]; do
    device=$(awk <<<"${device_list}" '{print $1}' | awk "NR==${int}")
    dev_size=$(grep <<<"${device_list}" -w "${device}" | awk '{print $2}')
    dev_type=$(grep <<<"${device_list}" -w "${device}" | awk '{print $3}')
    dev_fs=$(grep <<<"${device_list}" -w "${device}" | awk '{print $4}')
    dev_mnt=$(df | grep -w "${device}" | awk '{print $6}' | sed 's/mnt\/\?//')
    if (grep <<<"${dev_mnt}" "/" &>/dev/null); then
      dev_used=$(df -T | grep -w "${device}" | awk '{print $6}')
    fi
    test -z "${dev_fs}" || test "${dev_fs}" = "linux_raid_member" &&
      dev_fs=${empty_value}
    test -z "${dev_used}" && dev_used=${empty_value}
    test -z "${dev_mnt}" && dev_mnt=${empty_value}
    parent_device=$(lsblk -dnro PKNAME /dev/"${device/-//}")
    if [ -z "${parent_device}" ]; then
      dev_type=$(grep <<<"${device_list}" -w "${device}" | awk '{print $3}')
    else
      dev_type=$(fdisk -lo Device,Type /dev/"${parent_device}" |
        grep -w "${device}" | cut -d ' ' -f 2- |
        sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/ /_/g')
    fi
    echo "\"${device}\" \"${dev_size} ${dev_used} ${dev_fs} ${dev_mnt} \
${dev_type}\" \\" >>"${tmp_list}"
    int=$((int + 1))
  done
  column <"${tmp_list}" -t >>"${tmp_menu}"
  echo "\"${done_msg}\" \"${write}\"" >>"${tmp_menu}"
  echo "if [ \"\$?\" -eq \"3\" ]; then clear ; echo \"${done_msg}\" ; fi" \
    >>"${tmp_menu}"
  part=$(bash "${tmp_menu}" | sed 's/^\s\+//g;s/\s\+$//g')
  if (grep <<<"${part}" "${done_msg}" &>/dev/null); then
    part="${done_msg}"
  fi
  rm "${tmp_menu}" "${tmp_list}"
  part_class
}

part_class() {
  op_title="${edit_op_msg}"
  if [ -z "${part}" ]; then
    unset DRIVE ROOT
    return
  else
    part_size=$(grep <<<"${device_list}" -w "${part}" | awk '{print $2}')
    part_type=$(grep <<<"${device_list}" -w "${part}" | awk '{print $3}')
    part_fs=$(grep <<<"${device_list}" -w "${part}" | awk '{print $4}')
    part_mount=$(df | grep -w "${part}" | awk '{print $6}' | sed 's/mnt\/\?//')
  fi
  if [ "${part_type}" = "lvm" ]; then
    part=${part/-//}
  fi
  if [ "${part_fs}" = "linux_raid_member" ]; then # do nothing
    part_menu
  elif [ "${part_type}" = "disk" ] ||
      ( (grep -E "raid[0-9]+" <<<"${part_type}" &>/dev/null) &&
      [ -z "${part_fs}" ]); then # partition
    source "${LANG_FILE}"
    if (df | grep -w "${part}" | grep /mnt &>/dev/null); then
      if (yesno "\n${mount_warn_var}" "${edit}" "${cancel}" 1); then
        points=$(echo -e "${points_orig}\n${custom} ${custom}-mountpoint")
        umount -R /mnt &>/dev/null &
        pid=$! pri=0.1 msg="\n${wait_load}\n\n \Z1> \Z3umount -R /mnt\Zn" load
        MOUNTED=false
        unset DRIVE
        select_util
        clear
        ${UTIL} /dev/"${part}"
        sleep 0.5
        clear
      fi
    elif (yesno "\n${manual_part_var3}" "${edit}" "${cancel}"); then
      select_util
      clear
      ${UTIL} /dev/"${part}"
      sleep 0.5
      clear
    fi
    part_menu
  elif [ "${part}" = "${done_msg}" ]; then # done
    if ! "${MOUNTED}"; then
      msg "\n${root_err_msg1}"
      part_menu
    else
      if [ -z "${BOOT}" ]; then
        BOOT="${ROOT}"
      fi
      final_part=$( (
        df -h | grep /mnt | awk '{print $1,$2,$6 "\\n"}' | sed 's/mnt\/\?//'
      ) | column -t)
      final_count=$(wc <<<"${final_part}" -l)
      part_menu="${partition} | ${size} | ${mountpoint}"
      if (yesno "\n${write_confirm_msg}\n\n${part_menu}\n\n${final_part} \
\n${write_confirm}" "${write}" "${cancel}" 1); then
        if (efivar -l &>/dev/null); then
          if (fdisk -l | grep "EFI" &>/dev/null); then
            if (yesno "\n${efi_man_msg}" "${yes}" "${no}"); then
              if [ "$(fdisk -l | grep -c "EFI")" -gt "1" ]; then
                efint=1
                while (true); do
                  if [ "$(fdisk -l | grep "EFI" |
                      awk "NR==${efint} {print \$1}")" = "" ]; then
                    msg "${efi_err_msg1}"
                    part_menu
                  fi
                  esp_part=$(fdisk -l | grep "EFI" |
                    awk "NR==${efint} {print \$1}")
                  esp_mnt=$(df -T | grep "${esp_part}" | awk '{print $7}' |
                    sed 's|/mnt||')
                  if (df -T | grep "${esp_part}" &>/dev/null); then
                    break
                  else
                    efint=$((efint + 1))
                  fi
                done
              else
                esp_part=$(fdisk -l | grep "EFI" | awk '{print $1}')
                if ! (df -T | grep "${esp_part}" &>/dev/null); then
                  source "${LANG_FILE}"
                  if (yesno "\n${efi_mnt_var}" "${yes}" "${no}"); then
                    if ! (mountpoint /mnt/boot &>/dev/null); then
                      mkdir /mnt/boot &>/dev/null
                      mount "${esp_part}" /mnt/boot
                    else
                      msg "\n${efi_err_msg}"
                      part_menu
                    fi
                  else
                    part_menu
                  fi
                else
                  esp_mnt=$(df -T | grep "${esp_part}" | awk '{print $7}' |
                    sed 's|/mnt||')
                fi
              fi
              source "${LANG_FILE}"
              if ! (df -T | grep "${esp_part}" | grep "vfat" &>/dev/null); then
                if (yesno "\n${vfat_var}" "${yes}" "${no}"); then
                  (
                    umount -R "${esp_mnt}"
                    mkfs.vfat -F32 "${esp_part}"
                    mount "${esp_part}" "${esp_mnt}"
                  ) &>/dev/null &
                  pid=$! pri=0.2 msg="\n${efi_load}\n\n \Z1> \Z3mkfs.vfat \
-F32 ${esp_part}\Zn" load
                  UEFI=true
                else
                  part_menu
                fi
              else
                UEFI=true
                export esp_part esp_mnt
              fi
            fi
          fi
        fi
        if "${ENABLE_BTRFS}" &&
            ! (df | grep "/mnt/boot\|/mnt/boot/efi" &>/dev/null); then
          FS="btrfs"
          source "${LANG_FILE}"
          msg "\n${fs_err_var}"
          part_menu
        fi
        sleep 1
        pid=$! pri=0.1 msg="\n${wait_load}\n\n \Z1> \Z3Finalize...\Zn" load
        return
      else
        part_menu
      fi
    fi
  else # install on a partition or md device with a filesystem
    source "${LANG_FILE}" &>/dev/null
    if [ -z "${ROOT}" ]; then
      case "${part_size}" in
      [1-9]T | [4-9]G | [1-9][0-9]*[GT] | [4-9].*[GT] | [4-9],*[GT])
        if (yesno "\n${root_var}" "${yes}" "${no}" 1); then
          fs_select
          if [ "$?" -gt "0" ]; then
            part_menu
          fi
          source "${LANG_FILE}"
          if (yesno "\n${root_confirm_var}" "${write}" "${cancel}" 1); then
            (
              sgdisk --zap-all /dev/"${part}"
              wipefs -a /dev/"${part}"
            ) &>/dev/null &
            pid=$! pri=0.1 \
              msg="\n${frmt_load}\n\n \Z1> \Z3wipefs -a /dev/${part}\Zn" load
            mkfs."${FS}" /dev/"${part}" &>/dev/null &
            pid=$! pri=1 \
              msg="\n${load_var1}\n\n \Z1> \Z3mkfs.${FS} /dev/${part}\Zn" load
            (
              mount /dev/"${part}" /mnt
              echo "$?" >/tmp/ex_status.var
            ) &>/dev/null &
            pid=$! pri=0.1 \
              msg="\n${mnt_load}\n\n \Z1> \Z3mount /dev/${part} /mnt\Zn" load
            if [ "$(</tmp/ex_status.var)" -eq "0" ]; then
              MOUNTED=true
              ROOT="${part}"
              if [ "${part_type}" = "lvm" ]; then
                lvm_pv=$(lvdisplay -m | grep -A 20 /dev/${part} |
                  grep "Physical volume" | sed 's/^\s\+//g;s/\s\+/ /g' |
                  cut -d ' ' -f 3)
                DRIVE=$(lsblk -dnro PKNAME ${lvm_pv})
              else
                DRIVE=$(lsblk -dnro PKNAME /dev/${part})
              fi
            else
              msg "\n${part_err_msg1}"
              return
            fi
          fi
        else
          part_menu
        fi
        ;;
      *)
        msg "\n${root_err_msg}"
        ;;
      esac
    elif [ -n "${part_mount}" ]; then
      if (yesno "\n${manual_part_var0}" "${edit}" "${back}" 1); then
        if [ "${part}" = "${ROOT}" ]; then
          if (yesno "\n${manual_part_var2}" "${yes}" "${no}" 1); then
            MOUNTED=false
            unset ROOT DRIVE
            umount -R /mnt &>/dev/null &
            pid=$! pri=0.1 msg="\n${wait_load}\n\n \Z1> \Z3umount -R /mnt\Zn" \
              load
          fi
        elif (yesno "\n${manual_part_var1}" "${yes}" "${no}" 1); then
          umount /mnt/"${part_mount}" &>/dev/null &
          pid=$! pri=0.1 \
            msg="\n${wait_load}\n\n \Z1> \Z3umount /mnt${part_mount}\Zn" load
          rm -r /mnt/"${part_mount:?}"
          points=$(echo -e "${part_mount}   mountpoint>\n${points}")
        fi
      fi
    elif (yesno "\n${manual_new_part_var}" "${edit}" "${back}"); then
      mnt=$(dialog --stdout --ok-button "${ok}" --cancel-button "${cancel}" \
        --menu "\n${mnt_var0}" 15 60 6 ${points})
      if [ "$?" -gt "0" ]; then
        part_menu
      fi
      if [ "${mnt}" = "${custom}" ]; then
        while (true); do
          mnt=$(dialog --stdout --ok-button "${ok}" --cancel-button "${cancel}"\
            --inputbox "${custom_msg}" 10 50 "/")
          if [ "$?" -gt "0" ]; then
            part_menu
            break
          elif (grep <<<"${mnt}" "[\[\$\!\'\"\`\\|%&#@()+=<>~;:?.,^{}]\|]" \
              &>/dev/null); then
            msg "\n${custom_err_msg0}"
          elif (grep <<<"${mnt}" "^[/]$" &>/dev/null); then
            msg "\n${custom_err_msg1}"
          else
            break
          fi
        done
      fi
      if (yesno "\n${part_frmt_msg}" "${yes}" "${no}" 1); then
        if [ "${mnt}" = "/boot/EFI" ] || [ "${mnt}" = "/boot/efi" ]; then
          BTRFS=false
        fi
        if (fdisk -l | grep "${part}" | grep "EFI" &>/dev/null); then
          VFAT=true
        fi
        fs_select
        if [ "$?" -gt "0" ]; then
          part_menu
        fi
        FRMT=true
      else
        FRMT=false
      fi
      if [ "${mnt}" = "/boot" ] || [ "${mnt}" = "/boot/EFI" ] ||
         [ "${mnt}" = "/boot/efi" ]; then
        BOOT="${part}"
      fi
      source "${LANG_FILE}"
      points=$(echo "${points}" | grep -v "${mnt}")
      if "${FRMT}"; then
        if (yesno "${part_confirm_var}" "${write}" "${cancel}" 1); then
          (
            sgdisk --zap-all /dev/"${part}"
            wipefs -a /dev/"${part}"
          ) &>/dev/null &
          pid=$! pri=0.1 \
            msg="\n${frmt_load}\n\n \Z1> \Z3wipefs -a /dev/${part}\Zn" load
          case "${FS}" in
          vfat)
            mkfs.vfat -F32 /dev/"${part}" &>/dev/null &
            ;;
          *)
            mkfs."${FS}" /dev/"${part}" &>/dev/null &
            ;;
          esac
          pid=$! pri=1 \
            msg="\n${load_var1}\n\n \Z1> \Z3mkfs.${FS} /dev/${part}\Zn" load
        else
          part_menu
        fi
      fi
      (
        mkdir -p /mnt/"${mnt}"
        mount /dev/"${part}" /mnt/"${mnt}"
        echo "$?" >/tmp/ex_status.var
        sleep 0.5
      ) &>/dev/null &
      pid=$! pri=0.1 \
        msg="\n${mnt_load}\n\n \Z1> \Z3mount /dev/${part} /mnt${mnt}\Zn" load
      if [ "$(</tmp/ex_status.var)" -gt "0" ]; then
        msg "\n${part_err_msg2}"
      fi
    fi
    part_menu
  fi
}

fs_select() {
  if "${VFAT}"; then
    FS=$(dialog --stdout --menu "\n${vfat_msg}" 11 65 1 "vfat" "${fs_fat}")
    if [ "$?" -gt "0" ]; then
      part_menu
    fi
    VFAT=false
  elif "${BTRFS}"; then
    FS=$(dialog --stdout --no-cancel --menu "\n${fs_msg}" 12 60 7 \
      "btrfs" "${fs_btrfs}" \
      "ext4" "${fs_ext4}" \
      "xfs" "${fs_xfs}")
  else
    FS=$(dialog --stdout --no-cancel --menu "\n${fs_msg}" 12 60 6 \
      "ext4" "${fs_ext4}" \
      "xfs" "${fs_xfs}")
    BTRFS=true
  fi
  if [ "${FS}" = "btrfs" ]; then
    ENABLE_BTRFS=true
  elif [ "${FS}" = "xfs" ]; then
    ENABLE_XFS=true
  fi
}

select_util() {
  UTIL=$(dialog --stdout --menu "\n${vfat_msg}" 13 65 3 \
    "cfdisk" "${part_util0}" \
    "fdisk" "${part_util1}" \
    "gdisk" "${part_util2}")
  if [ "$?" -gt "0" ]; then
    part_menu
  fi
}
