#!/usr/bin/env bash

set_user() {
  source "${lang_file}"
  op_title="${user_op_msg}"
  while (true); do
    # Prompt for username
    user=$(dialog --stdout --cancel-button "${cancel}" --ok-button "${ok}" \
      --inputbox "\n${user_msg1}" 12 55)
    if [ "$?" -gt "0" ]; then
      break
    elif [ -z "${user}" ]; then
      msg "\n${user_err_msg2}"
    elif (grep <<<"${user}" "^[0-9]\|[A-Z]\|[]:/?#@\!\$&'()*+,;=%[]" \
        &>/dev/null); then
      msg "\n${user_err_msg}"
    else
      log "Username set: ${user}"
      while (true); do
        # Prompt for full name
        full_user=$(dialog --stdout --cancel-button "${cancel}" --ok-button \
          "${ok}" --inputbox "\n${user_msg2}" 12 55)
        if [ "$?" != "0" ]; then
          break
        elif (grep <<<"${full_user}" "," &>/dev/null); then
          msg "\n${fulluser_err_msg}"
        else
          # Prompt for password ('root' will use the same password)
          set_password
          break
        fi
      done
      break
    fi
  done
}

set_hostname() {
  op_title="${host_op_msg}"
  while (true); do
    # Prompt for hostname
    hostname=$(dialog --ok-button "${ok}" --nocancel --inputbox "\n${host_msg}"\
      12 55 "golden" --stdout | sed 's/ //g')
    # Check for a starting number or any unallowed characters
    if (grep <<<"${hostname}" \
        "^[0-9]\|[\[\$\!\'\"\`\\|%&#@()+=<>~;:/?.,^{}]\|]" &>/dev/null); then
      msg "\n${host_err_msg}"
    else
      break
    fi
  done
}

set_password() {
  op_title="${passwd_op_msg}"
  while [ "${input}" != "${input_chk}" ]; do
    input=$(dialog --stdout --nocancel --clear --insecure --passwordbox \
      "${user_var0}" 11 55)
    input_chk=$(dialog --stdout --nocancel --clear --insecure --passwordbox \
      "${user_var1}" 11 55)
    if [ -z "${input}" ]; then
      msg "\n${passwd_msg0}"
      input_chk=default
    elif [ "${input}" != "${input_chk}" ]; then
      msg "\n${passwd_msg1}"
    fi
  done
  pass_crypt="$(echo "${input}" | openssl enc -aes-256-cbc -a -salt -pbkdf2 \
    -iter 1000 -pass pass:"${ssl_key}")"
  sleep 1 &
  pid=$! pri=0.1 msg="${wait_load}\n\n \Z1> \Z3encrypt passwd\Zn" load
  unset input input_chk
  input_chk=default
  log "Password set for user: ${user}"
  op_title="${user_op_msg}"
}

add_user() {
  if [ "${full_user}" = "" ]; then
    arch-chroot /mnt useradd -m -G audio,network,power,storage,optical -s \
      /bin/bash "${user}" &>/dev/null &
    pid=$! pri=0.1 msg="${wait_load}\n\n \Z1> \Z3useradd ${user}\Zn" load
  else
    arch-chroot /mnt useradd -m -G audio,network,power,storage,optical -c \
      "${full_user}" -s /bin/bash "${user}" &>/dev/null &
    pid=$! pri=0.1 \
      msg="${wait_load}\n\n \Z1> \Z3useradd ${user}\Zn" load
  fi
  input="$(echo "${pass_crypt}" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 \
    -iter 1000 -pass pass:"${ssl_key}")"
  printf "%s\n%s" "${input}" "${input}" | arch-chroot /mnt passwd "${user}" \
    &>/dev/null &
  pid=$! pri=0.1 \
    msg="${wait_load}\n\n \Z1> \Z3passwd ${user}\Zn" load
  unset input
  (
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /mnt/etc/sudoers
    arch-chroot /mnt usermod -a -G wheel "${user}"
  ) &>/dev/null &
  pid=$! pri=0.1 msg="${wait_load}\n\n \Z1> \Z3usermod -a -G wheel ${user}\Zn" \
    load
  log "User added: ${user}"
}
