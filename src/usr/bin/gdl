#!/usr/bin/env bash
#
# Golden Drake Linux (GDL): an Arch installer for gamers and game developers!
# Copyright (C) 2020-2021 Golden Drake Studios: https://goldendrakestudios.com
# Forked originally from the Anarchy installer: https://anarchyinstaller.org

. libgdl.sh
. /etc/gdl.conf
. "${LANG_FILE}"

init() {
  if [ "$(id -u)" -ne 0 ]; then
    dragonsay "Sorry, human: gdl requires root privileges (e.g., sudo)."
    exit 1
  elif [ ! -f "${LOG_FILE}" ]; then
    # First (automatic) launch of the installer; create log file
    touch "${LOG_FILE}"
    # Customize the installer's pacman.conf
    sed -i 's/^#Color$/Color/' /etc/pacman.conf
    sed -i 's/^#TotalDownload$/TotalDownload/' /etc/pacman.conf
    sed -i 's/^#CheckSpace$/CheckSpace/' /etc/pacman.conf
    sed -i '/^#VerbosePkgLists$/ a ILoveCandy' /etc/pacman.conf
    sed -i '/\[multilib]$/ {
      N
      /Include/s/#//g}' /etc/pacman.conf
    clear
    # Welcome the user, then exit to command prompt so they can run other
    # commands (if desired) before jumping into the installation process
    dragonsay "Welcome to Golden Drake Linux!"
    echo -e "Type ${Green}gdl${NC} or ${Green}installer${NC} to begin the \
installation process.\n"
    exit
  fi
  log "Initializing installer"
  trap force_quit SIGINT # Execute trap when CTRL+C is pressed (SIGINT)
  for library in /usr/lib/gdl/*; do
    source "${library}"
  done
  set_language
  source "${LANG_FILE}"
  RELOAD=true
  systemctl start NetworkManager.service
}

main() {
  set_keyboard_layout
  start_menu
  update_mirrors
  get_connection_info
  set_locale
  set_zone
  prepare_drives
  install_arch_linux
}

start_menu() {
  if [ ! -f /root/.gdl_updated ]; then
    dialog --clear --title " About Golden Drake Linux (GDL) " \
      --msgbox "\n${start_menu_msg}\n\n${start_menu_social}" 18 80
    op_title="GDL"
    menu_choice="$(dialog --stdout --menu "What do you want to do?" 18 80 5 \
      "Start" "Start the installation" \
      "Update" "Update gdl and start the installation" \
      "Exit" "Drop into a shell (run 'gdl' to return)")"
    log "Start menu selection: ${menu_choice}"
    case "${menu_choice}" in
    Start) ;;
    Update)
      # Update Arch packages and keyring
      check_connection
      log "Updating pacman keys"
      (
        pacman -Sy archlinux-keyring --noconfirm |& log
        pacman-key --keyserver hkp://keyserver.ubuntu.com --init |& log
        pacman-key --keyserver hkp://keyserver.ubuntu.com --populate archlinux \
          |& log
        pacman-key --keyserver hkp://keyserver.ubuntu.com --refresh-keys |& log
      ) &>/dev/null &
      pid=$! pri=0.3 \
        msg="\n${pacman_load}\n\n \Z1> \Z3pacman-key --refresh-keys\Zn" load
      touch /root/.gdl_updated
      ;;
    Exit)
      clear
      dragonsay "${how_to_relaunch_installer}"
      exit
      ;;
    esac
  fi
}

main_menu() {
  op_title="${menu_op_msg}"
  while (true); do
    menu_item="$(dialog --stdout --nocancel --ok-button "${ok}" \
      --menu "${menu}" 19 60 8 \
      "${menu0}" "-" \
      "${menu1}" "-" \
      "${menu2}" "-" \
      "${menu3}" "-" \
      "${menu5}" "-" \
      "${menu11}" "-" \
      "${menu12}" "-")"
    case "${menu_item}" in
    "${menu0}") # Set system locale
      set_locale
      ;;
    "${menu1}") # Set system time zone
      set_zone
      ;;
    "${menu2}") # Set system keymap
      set_keys
      ;;
    "${menu3}") # Prepare drives check if mounted
      if "${MOUNTED}"; then
        if (yesno "\n${menu_err_msg3}" "${yes}" "${no}" 1); then
          MOUNTED=false
          prepare_drives
        fi
      else
        prepare_drives
      fi
      ;;
    "${menu5}") # Begin base install
      if "${MOUNTED}"; then
        install_arch_linux
      elif (yesno "\n${install_err_msg1}" "${yes}" "${no}"); then
        prepare_drives
      fi
      ;;
    "${menu11}") # "Reboot" (final system status check)
      final_system_check
      ;;
    "${menu12}") # Exit installer
      if (yesno "\n${menu_exit_msg}" "${yes}" "${no}"); then
        clear
        dragonsay "${how_to_relaunch_installer}"
        exit
      fi
      ;;
    esac
  done
}

install_arch_linux() {
  prepare_base
  set_desktop_and_graphics_settings
  set_hostname
  set_user
  select_additional_software
  install_base
  configure_system
  install_additional_software
  add_user
  final_system_check
}

final_system_check() {
  op_title="${complete_op_msg}"
  # Check if system is installed
  if "${INSTALLED}"; then
    clear
    dragonsay "${install_complete_msg1}" | tee -a "${LOG_FILE}"
    cp "${LOG_FILE}" /mnt/root
    echo -e "${install_complete_msg2}"
    exit
  else
    # Warn user install incomplete, prompt for reboot
    if (yesno "${not_complete_msg}" "${yes}" "${no}"); then
      clear
      umount -R /mnt
      reboot
      exit
    fi
  fi
}

init
main
