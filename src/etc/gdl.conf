config() {
  # Set default variables
  ARCH=/mnt
  wifi=false
  SWAP=false
  crypted=false
  GPT=false
  UEFI=false
  mounted=false
  INSTALLED=false
  bootloader=false
  frmt=false
  input=default
  btrfs=true
  vfat=false
  add_repo=false
  enable_bt=false
  enable_f2fs=false
  enable_btrfs=false
  err=false
  manual_part=default
  export reload=false
  colors=true
  screen_h=true
  VM=false
  USB=none
  bluetooth=false
  drm=false
  NVIDIA=false
  GTK3=false
  OnLine=false
  LAPTOP=false
  DM="lightdm"
  aur_snapshot_link="https://aur.archlinux.org/cgit/aur.git/snapshot/"

  # GDL tmp directory
  if [ ! -d /tmp/gdl ]; then
    mkdir /tmp/gdl
  fi

  # Temporary files
  tmp_menu=/tmp/gdl/part.sh
  tmp_list=/tmp/gdl/part.list
  tmp_passwd=/tmp/gdl/passwd

  # Check for passwd file
  if [ -f "${tmp_passwd}" ]; then
    rm "${tmp_passwd}"
  fi

  touch "${tmp_passwd}"

  # Generate SSL key
  ssl_key="$(openssl rand -base64 32)"

  # Set term color values
  Green=$'\e[0;32m'
  Yellow=$'\e[0;33m'
  Red=$'\e[0;31m'
  Blue=$'\e[34m'
  ColorOff=$'\e[0m'

  if "${colors}"; then
    # Set default color scheme for installer
    tput civis
    echo -en "\e]P0000000" #darkblack (black)
    echo -en "\e]P1800000" #darkred (maroon)
    echo -en "\e]P200A86B" #darkgreen (jade)
    echo -en "\e]P3DA9100" #darkyellow (harvest gold)
    echo -en "\e]P4082567" #darkblue (sapphire)
    echo -en "\e]P5AB274F" #darkmagenta (amaranth purple)
    echo -en "\e]P63AA8C1" #darkcyan (moonstone)
    echo -en "\e]P7C0C0C0" #darkwhite/lightgrey (silver)
    echo -en "\e]P8555555" #lightblack/darkgrey (Davy's gray)
    echo -en "\e]P9FF2400" #lightred (scarlet)
    echo -en "\e]PA50C878" #lightgreen (emerald)
    echo -en "\e]PBD4AF37" #lightyellow (metallic gold)
    echo -en "\e]PC318CE7" #lightblue (bleu de France)
    echo -en "\e]PDE0115F" #lightmagenta (ruby)
    echo -en "\e]PE7FFFD4" #lightcyan (aquamarine)
    echo -en "\e]PFE5E4E2" #lightwhite (platinum)
    setterm -foreground yellow -store
    tput cnorm
  else
    mv /root/.dialogrc /root/.dialogrc-disabled
  fi

  # Packages to install regardless of desktop environment
  default_packages="alsa-utils base-devel bash bash-completion btrfs-progs bzip2
    coreutils cpupower cups cups-pdf dhcpcd dialog dosfstools e2fsprogs file
    filesystem findutils gawk gcc-libs gettext git git-lfs glibc grep grub gufw
    gvfs gvfs-mtp gvfs-smb gzip inetutils iproute2 iputils licenses linux
    linux-firmware linux-headers lvm2 man-db man-pages networkmanager
    network-manager-applet ntfs-3g pacman pacman-contrib pavucontrol pciutils
    procps-ng psmisc pulseaudio pulseaudio-alsa sed shadow sudo systemd
    systemd-sysvcompat tar texinfo ttf-dejavu unzip util-linux vim wget
    xdg-user-dirs xorg-apps xorg-server xorg-xinit xterm xz "

  # Check terminal line height
  if [ "$(tput lines)" -lt 25 ]; then
    screen_h=false
  fi

  # Check for USB device(s)
  if (lsblk | grep "run" | grep -o "sd." &>/dev/null); then
    USB="$(lsblk | grep "run" | grep -o "sd.")"
  fi

  # Check for bluetooth device
  if (dmesg | grep -i "blue" &>/dev/null); then
    bluetooth=true
  fi

  # List of time zones
  zonelist="$(find /usr/share/zoneinfo -maxdepth 1 | sed -n -e 's!^.*/!!p' | grep -v "posix\|right\|zoneinfo\|zone.tab\|zone1970.tab\|W-SU\|WET\|posixrules\|MST7MDT\|iso3166.tab\|CST6CDT" | sort | sed 's/$/ -/g')"

  # Full list of locales
  localelist="$(grep -E "^#?[a-z].*UTF-8" /etc/locale.gen | sed 's/#//' | awk '{print $1" -"}')"

  # Full list of keymaps
  key_maps="$(find /usr/share/kbd/keymaps -type f | sed -n -e 's!^.*/!!p' | grep ".map.gz" | sed 's/.map.gz//g' | sed 's/$/ -/g' | sort)"

  # List of default mount points for manual partitioning
  points_orig=$(echo -e "/boot   boot-mountpoint>\n/home   home-mountpoint>\n/opt   opt-mountpoint>\n/srv   srv-mountpoint>\n/usr    usr-mountpoint>\n/var    var-mountpoint>")

  # Check for laptop battery
  if [ -d /sys/class/power_supply/BAT* ]; then
    LAPTOP=true
  fi

  # Check for Wi-Fi network
  wifi_network=$(ip addr | grep "wlp\|wlo\|wlan" | awk '{print $2}' | sed 's/://' | head -n 1)
  if [ -n "${wifi_network}" ]; then
    wifi=true
  fi

  # Check for VM
  case "$(systemd-detect-virt)" in
  oracle)
    virt="vbox"
    VM=true
    ;;
  vmware)
    virt="vmware"
    VM=true
    ;;
  qemu)
    virt="qemu"
    VM=true
    ;;
  kvm)
    virt="kvm"
    VM=true
    ;;
  microsoft)
    virt="hyper-v"
    VM=true
    ;;
  xen)
    virt="xen"
    VM=true
    ;;
  esac

  # Check microcodes
  if grep -q 'AuthenticAMD' /proc/cpuinfo; then
    UCODE="amd-ucode"
  elif grep -q 'GenuineIntel' /proc/cpuinfo; then
    UCODE="intel-ucode"
  fi

  # Check VGA
  if ! "${VM}"; then
    if (lspci | grep VGA | grep "Intel" &>/dev/null); then
      default_GPU="xf86-video-intel"
      chipset="Intel"
    elif (lspci | grep VGA | grep "ATI\|AMD" &>/dev/null); then
      default_GPU="xf86-video-ati"
      chipset="AMD/ATI"
    elif (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
      NVIDIA=true default_GPU="xf86-video-nouveau"
      chipset="Nvidia"
    else
      default_GPU="xf86-video-vesa"
      chipset="Unknown"
    fi
  fi

  # linux pacman hook
  linux_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Type = Package
  Target = linux

  [Action]
  When = PostTransaction"

  # NVIDIA pacman hook
  nvidia_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Operation = Remove
  Type = Package
  Target = nvidia

  [Action]
  Depends = mkinitcpio
  When = PostTransaction"
}

# Source all variables
config
