################################################################################
# Golden Drake Linux: gdl.conf
#
# Copyright (c) 2020 Golden Drake Studios https://goldendrakestudios.com
#
# Forked from Anarchy https://gitlab.com/anarchyinstaller
#
# License: GPL v2.0
################################################################################

# Error codes:
# * Exit 1: Failed to update pacman keys (line 116)
# * Exit 2: Can't download update with wget - no internet connection (line 128)

config() {
    # Set default variables
    ARCH=/mnt
    wifi=false
    SWAP=false
    crypted=false
    GPT=false
    UEFI=false
    mounted=false
    INSTALLED=false
    bootloader=false
    frmt=false
    input=default
    btrfs=true
    vfat=false
    add_repo=false
    enable_bt=false
    enable_f2fs=false
    enable_btrfs=false
    enable_nm=false
    enable_dm=false
    err=false
    skip=false
    multilib=false
    dhcp=false
    manual_part=default
    desktop=false
    export reload=false
    menu_enter=false
    colors=true
    screen_h=true
    VM=false
    USB=none
    bluetooth=false
    drm=false
    NVIDIA=false
    GTK3=false
    enable_ssh=false
    enable_http=false
    enable_ftp=false
    enable_cups=false
    OnLine=false
    LAPTOP=false

    # GDL tmp directory
    if ! [[ -d /tmp/gdl ]]; then
        mkdir /tmp/gdl
    fi

    # Log and tmp files
    log=/tmp/gdl.log
    tmp_menu=/tmp/gdl/part.sh
    tmp_list=/tmp/gdl/part.list
    tmp_passwd=/tmp/gdl/passwd

    # Check for passwd file
    if [ -f "${tmp_passwd}" ]; then
        rm "${tmp_passwd}"
    fi

    touch "${tmp_passwd}"

    # Set default shell
    sh=/bin/bash

    # Generate SSL key
    ssl_key=$(openssl rand -base64 32)

    # Set term color values
    Green=$'\e[0;32m';
    Yellow=$'\e[0;33m';
    Red=$'\e[0;31m';
    Blue=$'\e[34m';
    ColorOff=$'\e[0m';

    # Get options
    case "${opt}" in
        -h|--help)
            usage
            exit 0
        ;;
        -n|--no-style)
            colors=false
        ;;
        -k|--keys)
            echo -e "${Yellow}*> GDL: Updating pacman keys..."
            pacman-db-upgrade
            pacman-key --init
            pacman-key --populate archlinux
            pacman-key --refresh-keys
            if [ "$?" -gt "0" ]; then
                echo -e "${Red}*> Error: ${Yellow}Failed to update pacman keys, exiting..."
                exit 1
            else
                echo -e "${Green}*> Updated: ${Yellow}Updated pacman keys successfully."
                exit 0
            fi
        ;;
        -u|--update)
            tmp_dir=$(mktemp -d)
            echo -ne "\n${Yellow}*> GDL: Downloading..."
            wget -q -4 --no-check-certificate -O ${tmp_dir}/master.tar.gz https://github.com/GoldenDrakeStudios/golden-drake-linux/archive/master.tar.gz
            if [ "$?" -gt "0" ]; then
                echo -e "${Red}*> Error: ${Yellow}Active network connection not detected - Please connect to the internet and try again. Exiting..."
                exit 2
            fi
            echo -e "${Green}done"

            echo -ne "\n${Yellow}*> GDL: Updating..."
            tar zxf ${tmp_dir}/master.tar.gz -C ${tmp_dir} &> /dev/null
            cp ${tmp_dir}/installer-master/gdl-installer.sh /usr/bin/gdl
            cp ${tmp_dir}/installer-master/etc/gdl.conf /etc/gdl.conf
            cp ${tmp_dir}/installer-master/lib/* /usr/lib/gdl/
            cp ${tmp_dir}/installer-master/lang/* /usr/share/gdl/lang/
            cp ${tmp_dir}/installer-master/wallpapers/* /usr/share/gdl/extra/wallpapers/
            cp -f ${tmp_dir}/installer-master/extra/{sysinfo,iptest} /usr/bin/
            cp -r ${tmp_dir}/installer-master/extra/* /usr/share/gdl/extra/
            echo -e "${Green}done"

            echo -e "\n${Green}*> ${Yellow}GDL updated successfully, you may now run gdl ${ColorOff}"
            exit
        ;;
    esac

    if "${colors}" ; then
        # Set default color scheme for installer
        tput civis
        echo -en "\e]P0073642" ; clear #black
        echo -en "\e]P8002B36" ; clear #darkgrey
        echo -en "\e]P1DC322F" ; clear #darkred
        echo -en "\e]P9CB4B16" ; clear #red
        echo -en "\e]P2859900" ; clear #darkgreen
        echo -en "\e]PA586E75" ; clear #green
        echo -en "\e]P3B58900" ; clear #brown
        echo -en "\e]PB657B83" ; clear #yellow
        echo -en "\e]P4268BD2" ; clear #darkblue
        echo -en "\e]PC839496" ; clear #blue
        echo -en "\e]P5D33682" ; clear #darkmagenta
        echo -en "\e]PD6C71C4" ; clear #magenta
        echo -en "\e]P62AA198" ; clear #darkcyan
        echo -en "\e]PE93A1A1" ; clear #cyan
        echo -en "\e]P7EEE8D5" ; clear #lightgrey
        echo -en "\e]PFFDF6E3" ; clear #white
        setterm -background black
        setterm -foreground white
        tput cnorm
    else
        mv /root/.dialogrc /root/.dialogrc-disabled
    fi

    # Default packages
    base_defaults="bash bzip2 coreutils file filesystem findutils gawk gcc-libs gettext glibc grep gzip iproute2 iputils licenses pacman pciutils procps-ng psmisc sed shadow systemd systemd-sysvcompat tar util-linux xz wget vim cpupower linux-firmware man-db man-pages texinfo sudo btrfs-progs dosfstools e2fsprogs ntfs-3g lvm2"

    # Desktop packages
    de_defaults="xdg-user-dirs xorg-server xorg-apps xorg-xinit xterm ttf-dejavu gvfs gvfs-smb gvfs-mtp pulseaudio pavucontrol pulseaudio-alsa alsa-utils unzip yay"
    extras="gvfs arc-gtk-theme elementary-icon-theme numix-icon-theme-git numix-circle-icon-theme-git htop lynx chromium libreoffice-fresh vlc gnome-packagekit pantheon-music yay"

    # Check terminal line height
    if [ "$(tput lines)" -lt "25" ]; then
        screen_h=false
    fi

    # Check if install media is USB
    if (lsblk | grep "run" | grep -o "sd." &> /dev/null); then
        USB=$(lsblk | grep "run" | grep -o "sd.")
    fi

    # Check for bluetooth device
    if (dmesg | grep -i "blue" &> /dev/null); then
        bluetooth=true
    fi

    # List of timezones
    zonelist=$(find /usr/share/zoneinfo -maxdepth 1 | sed -n -e 's!^.*/!!p' | grep -v "posix\|right\|zoneinfo\|zone.tab\|zone1970.tab\|W-SU\|WET\|posixrules\|MST7MDT\|iso3166.tab\|CST6CDT" | sort | sed 's/$/ -/g')

    # Full list of locales
    localelist=$(grep -E "^#?[a-z].*UTF-8" /etc/locale.gen | sed 's/#//' | awk '{print $1" -"}')

    # List of countries for mirrorlist update
    countries=$(echo -e "AS All-Https\n AT Austria\n AU  Australia\n BD Bangladesh\n BE Belgium\n BG Bulgaria\n BR Brazil\n BY Belarus\n CA Canada\n CL Chile \n CN China\n CO Colombia\n CZ Czech-Republic\n DE Germany\n DK Denmark\n EE Estonia\n ES Spain\n FI Finland\n FR France\n GB United-Kingdom\n HU Hungary\n IE Ireland\n IL Isreal\n IN India\n IT Italy\n JP Japan\n KR Korea\n KZ Kazakhstan\n LK Sri-Lanka\n LU Luxembourg\n LV Latvia\n MK Macedonia\n NC New-Caledonia\n NL Netherlands\n NO Norway\n NZ New-Zealand\n PL Poland\n PT Portugal\n RO Romania\n RS Serbia\n RU Russia\n SE Sweden\n CH Switzerland\n SG Singapore\n SK Slovakia\n SI Slovenia\n TR Turkey\n TW Taiwan\n UA Ukraine\n US United-States\n UZ Uzbekistan\n VN Viet-Nam\n ZA South-Africa")

    # Full list of keymaps
    key_maps=$(find /usr/share/kbd/keymaps -type f | sed -n -e 's!^.*/!!p' | grep ".map.gz" | sed 's/.map.gz//g' | sed 's/$/ -/g' | sort)

    # List of default mountpoints for manual partitioning
    points_orig=$(echo -e "/boot   boot-mountpoint>\n/home   home-mountpoint>\n/opt   opt-mountpoint>\n/srv   srv-mountpoint>\n/usr    usr-mountpoint>\n/var    var-mountpoint>")

    # Check for laptop
    if (acpi | egrep "*" &>/dev/null); then
        LAPTOP=true
    fi

    # Check for wifi network
    wifi_network=$(ip addr | grep "wlp\|wlo\|wlan" | awk '{print $2}' | sed 's/://' | head -n 1)

    if [ -n "${wifi_network}" ]; then
        wifi=true
    fi

    # Check for VM
    case $(systemd-detect-virt) in
        oracle)
            virt="vbox"
            VM=true
        ;;
        vmware)
            virt="vmware"
            VM=true
        ;;
        qemu)
            virt="qemu"
            VM=true
        ;;
        kvm)
            virt="kvm"
            VM=true
        ;;
        microsoft)
            virt="hyper-v"
            VM=true
        ;;
        xen)
            virt="xen"
            VM=true
        ;;
    esac

    # Check VGA
    if ! "${VM}" ; then
        if (lspci | grep VGA | grep "Intel" &>/dev/null); then
            default_GPU="xf86-video-intel"
            chipset="Intel"
        elif (lspci | grep VGA | grep "ATI\|AMD" &>/dev/null); then
            default_GPU="xf86-video-ati"
            chipset="AMD/ATI"
        elif (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
            NVIDIA=true default_GPU="xf86-video-nouveau"
            chipset="Nvidia"
        else
            default_GPU="xf86-video-vesa"
            chipset="Unknown"
        fi
    fi

    # Pacman Hooks

    # linux hook
    linux_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux

    [Action]
    When = PostTransaction"

    # LTS linux hook
    lts_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-lts

    [Action]
    When = PostTransaction"

    # Hardened linux hook
    hardened_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-hardened

    [Action]
    When = PostTransaction"

    # Zen linux hook
    zen_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-zen

    [Action]
    When = PostTransaction"

    # NVIDIA hook
    nvidia_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Operation = Remove
    Type = Package
    Target = nvidia

    [Action]
    Depends = mkinitcpio
    When = PostTransaction"
}

usage() {
    clear
    echo -e "Usage: ${Green} gdl [options]${ColorOff}"
    echo -e "${Green}   -h | --help         ${Yellow}Display this help message${ColorOff}"
    echo -e "${Green}   -k | --keys         ${Yellow}Update pacman keys${ColorOff}"
    echo -e "${Green}   -n | --no-style     ${Yellow}Disable installer style${ColorOff}"
    echo -e "${Green}   -u | --update       ${Yellow}Update gdl scripts${ColorOff}"
    echo -e ""
    echo -e "Installer:"
    echo -e "\t${Blue}┌--------------------------┬----------------------------┐"
    echo -e "\t|          ${Green}Action${Blue}          |            ${Green}Key${Blue}             |"
    echo -e "\t├--------------------------┼----------------------------┤"
    echo -e "\t|                          |                   ${Red}___${Blue}      |"
    echo -e "\t|    ${Yellow}Move through the${Blue}      |     ${Yellow}Arrow        ${Red}| ↑ |${Blue}     |"
    echo -e "\t|    ${Yellow}installer options${Blue}     |     ${Yellow}Keys      ${Red}___|___|___${Blue}  |"
    echo -e "\t|                          |              ${Red}| ← | ↓ | → |${Blue} |"
    echo -e "\t|                          |              ${Red}|___|___|___|${Blue} |"
    echo -e "\t├--------------------------┼----------------------------┤"
    echo -e "\t|                          |                 ${Red}_______${Blue}    |"
    echo -e "\t|      ${Yellow}Press the${Blue}           |     ${Yellow}Enter      ${Red}| Intro |${Blue}   |"
    echo -e "\t|    ${Yellow}active button$Blue         |     ${Yellow}Key        ${Red}|___    |${Blue}   |"
    echo -e "\t|                          |                    ${Red}|   |${Blue}   |"
    echo -e "\t|                          |                    ${Red}|   |${Blue}   |"
    echo -e "\t|                          |                    ${Red}|___|${Blue}   |"
    echo -e "\t├--------------------------┼----------------------------┤"
    echo -e "\t|                          |             ${Red}______________${Blue} |"
    echo -e "\t| ${Yellow}Select the highlighted${Blue}   |   ${Yellow}Spacebar ${Red}|   Spacebar   |${Blue}|"
    echo -e "\t|         ${Yellow}option${Blue}           |            ${Red}|______________|${Blue}|"
    echo -e "\t|                          |                            |"
    echo -e "\t└--------------------------┴----------------------------┘${ColorOff}"
    echo -e ""
}

# Check all variables
config
